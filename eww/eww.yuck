(defvar cores "[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]")
(defvar workspaces "[]")
(defvar volume_percent 0)
(defvar wifi_status "{\"connected\": \"false\", \"name\": \"\"}")
;(defvar workspaces "[1]")

(defpoll time :interval "10s"
  "date '+%_H:%M'"
)
(defpoll date :interval "60s"
  "date '+%d %m %y'"
)

(defpoll battery :interval "5s" :initial "[\"\", 0, \"\", \"\"]"
  `$BATTERY_DIR/status.sh`
)
(defpoll disk :interval "15s" :initial 0
  `$DISK_DIR/get.sh`
)

(defwidget volume []
  (eventbox
    :width 30
    :onscroll "scripts/volume/{}.sh"
    (overlay
      (label :text "" :class "volume" :halign "center")
      (circular-progress
        :value volume_percent
        :start-at 75
        :thickness 3
        :clockwise true
        :class "volume"
      )
    )
  )
)

(defwidget core [entry]
  (circular-progress
    ; thickness does not update the widget, but using the variable here is
    ; enough to trigger an update whenever the value changes
    :value {cores[entry] * 0 + 100.0 / 12.0}
    :start-at {entry * (100.0 / 12.0)}
    :thickness {(cores[entry] / 100.0) * 8}
    :class {cores[entry] > 80 ? "corehigh" : "corelow"}
    :clockwise true
  )
)

(defwidget coreusage []
  (box
    :width 25
    (overlay
      (label :text "" :class "core" :halign "center" :valign "center")
      (core :entry 0)
      (core :entry 1)
      (core :entry 2)
      (core :entry 3)
      (core :entry 4)
      (core :entry 5)
      (core :entry 6)
      (core :entry 7)
      (core :entry 8)
      (core :entry 9)
      (core :entry 10)
      (core :entry 11)
    )
  )
)

(defwidget ramusage []
  (box
    :width 25
    (overlay
      (label :text "ﳔ" :class "ram" :halign "center")
      (circular-progress
        :value {EWW_RAM.used_mem_perc}
        :start-at 75
        :class "ram"
        :thickness 3
      )
      (circular-progress
        :value {disk / 100 * 50}
        :start-at {75 - disk / 100 * 50}
        :class "ram"
        :thickness 1
      )
    )
  )
)

(defwidget time[]
  (box
    :orientation "v"
    :space-evenly false
    :valign "center"
    :spacing -5
    :style "min-width: 5em"
    (label
      :class "time"
      :text "${time}"
    )
    (label
      :class "date"
      :text "${date}"
    )
  )
)

(defvar test true)

(defwidget test-box [?color]
  (box :style "background: ${color}"
    :orientation "h"
    :halign "start"
    :hexpand false
    :space-evenly false
  :width 50)
)

(defwidget battery []
  (box
    :orientation "v"
    :space-evenly false
    :valign "center"
    :style "padding: 0 0.3em 0 0.3em"
    (revealer
      :reveal {battery[0] == "Not charging"}
      :transition "slidedown"
      (label
        :text {battery[3]}
        :class "batteryicon"
      )
    )
    (revealer
      :reveal {battery[0] != "Not charging"}
      :transition "slideup"
      (box
        :orientation "v"
        :space-evenly false
        :spacing -5
        (label
          :yalign 0
          :text {battery[3]}
          :class "batteryiconsmall"
        )
        (label
          :yalign 1
          :text {battery[2]}
          :class "batterytext"
        )
      )
    )
  )
)

(defwidget wifi []
  (box
    :width 30
    :tooltip {wifi_status.name}
    (label
      :text {wifi_status.connected ? "直" : "睊"}
      :class "wifi"
      :halign "center"
    )
  )
)

(defwidget workspaces []
  (box
    :space-evenly false
    :class "workspaces"
    :spacing 10
    (for workspace in {workspaces}
      (eventbox
        :onclick "i3-msg workspace number ${workspace.id}"
        :onscroll "scripts/workspace/{}.sh"
        (box
          :space-evenly false
          :class {workspace.active ? "workspace active"  : "workspace"}
          (label
            :text {workspace.id}
            :class "id"
          )
          (label
            :text {workspace.name}
            :class "name"
          )
        )
      )
    )
  )
)

(defwidget bar []
  (centerbox
    (box
    )
    (box
      (workspaces)
    )
    (box
      :orientation "h"
      :halign "end"
      :spacing 10
      :space-evenly false
      (box
        :space-evenly false
        :spacing 0
        :class "vol"
        (volume)
      )
      (box
        :space-evenly false
        :class "metrics"
        :spacing 8
        (coreusage)
        (ramusage)
      )
      (box
        :space-evenly false
        :class "stats"
        :spacing 8
        (battery)
        (wifi)
      )
      (box
        :width 70
        :halign "center"
        (time)
      )
    )
  )
)

(defwindow bar0
  :monitor 0
  :style "background-color: rgba(0, 0, 0, 0)"
  :geometry (geometry
    :x "0%"
    :y "0px"
    :width "100%"
    :height "2%"
    :anchor "top center"
  )
  ; Wayland
  ;:stacking "fg"
  ;:exclusive true
  ; X11;
  :stacking "fg"
  :reserve (struts :distance "50px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (bar)
)

(defwindow bar1
  :monitor 1
  :geometry (geometry
    :x "0%"
    :y "0px"
    :width "100%"
    :height "2%"
    :anchor "top center"
  )
  ; Wayland
  ;:stacking "fg"
  ;:exclusive true
  ; X11;
  :stacking "fg"
  :reserve (struts :distance "50px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (bar)
)

(defwindow bar2
  :monitor 2
  :geometry (geometry
    :x "0%"
    :y "0px"
    :width "100%"
    :height "2%"
    :anchor "top center"
  )
  ; Wayland
  ;:stacking "fg"
  ;:exclusive true
  ; X11;
  :stacking "fg"
  :reserve (struts :distance "50px" :side "top")
  :windowtype "dock"
  :wm-ignore false
  (bar)
)